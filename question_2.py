import locale
from typing import Optional
from dataclasses import dataclass
from utils import number_input, str_input, create_row_formatter

locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')

dollar_ = lambda n: locale.currency(n, grouping=True)

row_ = create_row_formatter([(8, 0), (22, 6), (13, 4), (12, 2)], '|')

header_template = """\
                        {}
----------------------------------------------------------
Year    |         Cash         |  PV Factor  |  Amount
        |    Inflows/Outflows  |
----------------------------------------------------------\
"""


@dataclass
class ProjectResult:
    total_income: float
    net_present_value: float


class Project:
    name: str
    upfront_cost: float
    rate_of_return_percent: float
    duration_in_years: int
    cash_io_of_years: list[float]
    result: Optional[ProjectResult]

    @classmethod
    def create_from_input(cls):
        self = cls()
        self.name = str_input(f'Enter the name of project: ')
        self.upfront_cost = number_input(f'Enter the upfront cost for project {self.name}: ', float, min=0)
        self.rate_of_return_percent = number_input(f'Enter rate of return or discount rate(in %): ', float, min=0)
        self.duration_in_years = number_input(f'Enter the duration(in years): ', int, min=1)
        self.cash_io_of_years = []
        for i in range(self.duration_in_years):
            self.cash_io_of_years.append(number_input(f'Enter the cash inflow-outflows during year {i + 1}: ', float))
        self.result = None
        return self

    def calculate_result(self) -> str:
        buf = []
        buf.append(header_template.format(self.name))

        cash_io_sum = 0
        amount_sum = 0

        for i, cash_io in enumerate(self.cash_io_of_years):
            # calculate each year
            year = i + 1
            rate_of_return = self.rate_of_return_percent / 100
            pv_factor = 1 / (1 + rate_of_return) ** year
            amount = cash_io * pv_factor

            buf.append(
                row_([year, dollar_(cash_io), round(pv_factor, 4), dollar_(amount)])
            )
            cash_io_sum += cash_io
            amount_sum += amount

        # calculate project
        total_income = cash_io_sum
        present_value_of_future_benefits = amount_sum
        present_value_of_future_costs = self.upfront_cost
        net_present_value = present_value_of_future_benefits - present_value_of_future_costs

        # assign result
        self.result = ProjectResult(total_income, net_present_value)

        buf.append(f'Total Income: {dollar_(total_income)}')
        buf.append(f'Present Value of Future Benefits: {dollar_(present_value_of_future_benefits)}')
        buf.append(f'Present Value of Future Costs: {dollar_(present_value_of_future_costs)}')
        buf.append(f'Net Present Value(NPV): {dollar_(net_present_value)}')

        return '\n'.join(buf)


def analyse_projects(projects: list[Project]) -> tuple[Project, Project]:
    for project in projects:
        print(project.calculate_result())
        print()

    # find project with highest income
    sorted_projects = sorted(projects, key=lambda p: p.result.total_income, reverse=True)
    highest_income_projects = filter(lambda p: p.result.total_income == sorted_projects[0].result.total_income, sorted_projects)
    highest_income_project = sorted(highest_income_projects, key=lambda p: p.result.net_present_value, reverse=True)[0]

    # find project with highest npv
    sorted_projects = sorted(projects, key=lambda p: p.result.net_present_value, reverse=True)
    highest_nvp_projects = filter(lambda p: p.result.net_present_value == sorted_projects[0].result.net_present_value, sorted_projects)
    highest_nvp_project = sorted(highest_nvp_projects, key=lambda p: p.result.total_income, reverse=True)[0]

    print(f'The highest income is generated by project: {highest_income_project.name}')
    print(f'The project the company should be executing is: {highest_nvp_project.name}')
    return highest_income_project, highest_nvp_project


def main():
    projects = []
    projects_number = number_input('Enter the number of projects: ', int, min=1)
    print()
    for _ in range(projects_number):
        projects.append(Project.create_from_input())
        print()

    analyse_projects(projects)


if __name__ == '__main__':
    main()
